import React from 'react';
import { Screen, Component as DslComponent } from '../dsl/parser'; // Adjusted path
import './Renderer.css';

interface RendererProps {
  screen: Screen | null; // Allow null if no screen is selected or found
}

const Renderer: React.FC<RendererProps> = ({ screen }) => {
  if (!screen) {
    return <div className="renderer-placeholder">No screen selected or DSL is empty.</div>;
  }

  // Basic XSS sanitization for URLs (though parser also does some)
  const sanitizeUrl = (url: string | undefined): string | undefined => {
    if (!url) return undefined;
    // Allow relative, absolute, http, https. Reject javascript: or data: URIs for MVP.
    if (url.startsWith('javascript:') || url.startsWith('data:')) {
      console.warn(`Blocked potentially unsafe URL: ${url}`);
      return undefined; // Or a placeholder image/error
    }
    return url;
  };

  return (
    <div className="wireframe-screen">
      <h3>{screen.name}</h3>
      <div className="components-stack">
        {screen.components.map((component: DslComponent, index: number) => {
          switch (component.type) {
            case 'label':
              return <p key={index} className="wireframe-label">{component.text}</p>;
            case 'input':
              return (
                <input
                  key={index}
                  type="text"
                  placeholder={component.placeholder}
                  className="wireframe-input"
                  readOnly // Make them non-interactive for pure wireframe view
                />
              );
            case 'button':
              return <button key={index} className="wireframe-button">{component.text}</button>;
            case 'image':
              const safeSrc = sanitizeUrl(component.src);
              // Add data-src attribute to the container for CSS to use in placeholder
              return (
                <div key={index} className={`wireframe-image ${!safeSrc ? 'wireframe-image-empty' : ''}`} data-src={component.src || 'not specified'}>
                  {safeSrc ? (
                    <img src={safeSrc} alt={`Wireframe: ${component.src}`} />
                  ) : (
                    // Placeholder text is now handled by CSS using ::before and content: attr(data-src)
                    // If you need specific "Invalid image src" text for truly broken URLs (vs. empty src),
                    // you might need a different class or to keep a minimal div here.
                    // For now, CSS handles placeholder text based on presence of <img> and data-src.
                    null // Content is generated by CSS pseudo-element
                  )}
                </div>
              );
            default:
              // Should not happen if parser is correct
              return <p key={index} style={{ color: 'red' }}>Unknown component: {component.type}</p>;
          }
        })}
      </div>
    </div>
  );
};

export default Renderer;
